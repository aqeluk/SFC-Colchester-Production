generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id            String          @id @default(cuid())
  isDelivering  Boolean
  isTakingCash  Boolean
  averageRating Float
  reviewsCount  Int
  deliveryTimes DeliveryTimes[]
  reviews       Review[]
}

model DeliveryTimes {
  id           String     @id @default(cuid())
  day          String
  openingTime  String
  closingTime  String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Review {
  id           String     @id @default(cuid())
  comment      String
  rating       Int
  userId       String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model User {
  id              String      @id @default(cuid())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?
  image           String?
  isAdmin         Boolean     @default(false)
  phoneVerified   Boolean     @default(false)
  verificationSid String?
  phoneNumber     String?
  accounts        Account[]
  Order           Order[]
  reviews         Review[]
  sessions        Session[]
  addresses       UKAddress[]
}

model DiscountCode {
  id         String   @id @default(cuid())
  code       String   @unique
  discount   Float
  validFrom  DateTime @default(now())
  validUntil DateTime @default(now())
  isActive   Boolean  @default(true)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  desc      String
  img       String
  slug      String    @unique
  products  Product[]
}

model WebsiteMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String?
  email     String
  phone     String
  subject   String?
  message   String
}

model JobApplication {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  fullName    String
  email       String
  phone       String
  coverLetter String?
  cvUrl       String
}

model Product {
  id                       String          @id @default(cuid())
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  title                    String          @unique
  desc                     String
  img                      String?
  price                    Float
  isFeatured               Boolean         @default(false)
  isAvailable              Boolean         @default(true)
  selectableSpecificExtras Boolean         @default(false)
  catSlug                  String
  category                 Category        @relation(fields: [catSlug], references: [slug])
  genericMeal              GenericMeal[]   @relation("GenericMealToProduct")
  pizzaToppings            PizzaToppings[] @relation("PizzaToppings")
  defaultPizzaToppings     PizzaToppings[] @relation("PizzaToppingsToProduct")
  salads                   Salad[]         @relation("ProductSalads")
  sauces                   Sauce[]         @relation("ProductSauces")
  defaultSalads            Salad[]         @relation("ProductToSalad")
  defaultSauces            Sauce[]         @relation("ProductToSauce")
  specificExtra            SpecificExtra[] @relation("ProductToSpecificExtra")
  specificMeal             SpecificMeal[]  @relation("ProductToSpecificMeal")
}

model Salad {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String
  isAvailable  Boolean   @default(true)
  products     Product[] @relation("ProductSalads")
  defaultSalad Product[] @relation("ProductToSalad")
}

model Sauce {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  title        String
  isAvailable  Boolean   @default(true)
  products     Product[] @relation("ProductSauces")
  defaultSauce Product[] @relation("ProductToSauce")
}

model SpecificMeal {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  price       Float
  isAvailable Boolean   @default(true)
  products    Product[] @relation("ProductToSpecificMeal")
}

model GenericMeal {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String
  price        Float
  isAvailable  Boolean       @default(true)
  DrinkOptions DrinkOption[] @relation("DrinkOptionToGenericMeal")
  products     Product[]     @relation("GenericMealToProduct")
}

model SpecificExtra {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  price       Float
  isAvailable Boolean   @default(true)
  products    Product[] @relation("ProductToSpecificExtra")
}

model PizzaToppings {
  id                   String    @id @default(cuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  title                String
  price                Float
  isAvailable          Boolean   @default(true)
  products             Product[] @relation("PizzaToppings")
  defaultPizzaToppings Product[] @relation("PizzaToppingsToProduct")
}

model DrinkOption {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  title        String
  isAvailable  Boolean       @default(true)
  genericMeals GenericMeal[] @relation("DrinkOptionToGenericMeal")
}

model UKAddress {
  id                String  @id @default(cuid())
  line1             String
  line2             String?
  postcode          String
  county            String?
  userId            String?
  town_or_city      String?
  formatted_address String?
  user              User?   @relation(fields: [userId], references: [id])
  Order             Order[]
}

model Order {
  id               String     @id @default(cuid())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deliveryMethod   String
  paymentMethod    String
  orderNotes       String?
  products         Json?
  subtotal         Float
  totalPrice       Float
  orderStatus      String
  paymentStatus    String
  intent_id        String?    @unique
  userEmail        String
  phoneNumber      String?
  deliveryAddress  UKAddress? @relation(fields: [uKAddressId], references: [id])
  discountCode     String?
  discountedAmount Float?
  deliveryTime     DateTime?
  deliveryCharge   Float?
  userName         String?
  user             User       @relation(fields: [userEmail], references: [email])
  uKAddressId      String?
}
